{"version":3,"file":"index.esm.js","sources":["../src/constants/apiPaths.ts","../src/constants/index.ts","../src/httpClient/helpers/createFetchLogger.ts","../src/httpClient/types.ts","../src/httpClient/urlBuilder.ts","../src/httpClient/utils.ts","../src/httpClient/index.ts","../src/httpClient/helpers/index.ts","../src/constants/httpStatusCodes.ts","../src/sdk/helpers/index.ts","../src/sdk/validations/core.ts","../src/sdk/validations/validators.ts","../src/sdk/validations/index.ts","../src/sdk/accesskey.ts","../src/utils/wrapWith/index.ts","../src/utils/utils.ts","../src/sdk/types.ts","../src/sdk/enchantedLink/validations.ts","../src/sdk/enchantedLink/index.ts","../src/sdk/flow/index.ts","../src/sdk/magicLink/validations.ts","../src/sdk/magicLink/index.ts","../src/sdk/oauth/types.ts","../src/sdk/oauth/index.ts","../src/sdk/otp/index.ts","../src/sdk/saml.ts","../src/sdk/totp.ts","../src/sdk/password/validations.ts","../src/sdk/password/index.ts","../src/sdk/webauthn.ts","../src/sdk/notp/index.ts","../src/sdk/index.ts","../src/createSdk.ts","../src/index.ts"],"sourcesContent":["/** API paths for the Descope service APIs */\nexport default {\n  accessKey: {\n    exchange: '/v1/auth/accesskey/exchange',\n  },\n  otp: {\n    verify: '/v1/auth/otp/verify',\n    signIn: '/v1/auth/otp/signin',\n    signUp: '/v1/auth/otp/signup',\n    update: {\n      email: '/v1/auth/otp/update/email',\n      phone: '/v1/auth/otp/update/phone',\n    },\n    signUpOrIn: '/v1/auth/otp/signup-in',\n  },\n  magicLink: {\n    verify: '/v1/auth/magiclink/verify',\n    signIn: '/v1/auth/magiclink/signin',\n    signUp: '/v1/auth/magiclink/signup',\n    update: {\n      email: '/v1/auth/magiclink/update/email',\n      phone: '/v1/auth/magiclink/update/phone',\n    },\n    signUpOrIn: '/v1/auth/magiclink/signup-in',\n  },\n  enchantedLink: {\n    verify: '/v1/auth/enchantedlink/verify',\n    signIn: '/v1/auth/enchantedlink/signin',\n    signUp: '/v1/auth/enchantedlink/signup',\n    session: '/v1/auth/enchantedlink/pending-session',\n    update: {\n      email: '/v1/auth/enchantedlink/update/email',\n    },\n    signUpOrIn: '/v1/auth/enchantedlink/signup-in',\n  },\n  oauth: {\n    start: '/v1/auth/oauth/authorize',\n    exchange: '/v1/auth/oauth/exchange',\n    startNative: 'v1/auth/oauth/native/start',\n    finishNative: 'v1/auth/oauth/native/finish',\n  },\n  saml: {\n    start: '/v1/auth/saml/authorize',\n    exchange: '/v1/auth/saml/exchange',\n  },\n  totp: {\n    verify: '/v1/auth/totp/verify',\n    signUp: '/v1/auth/totp/signup',\n    update: '/v1/auth/totp/update',\n  },\n  notp: {\n    signIn: '/v1/auth/notp/whatsapp/signin',\n    signUp: '/v1/auth/notp/whatsapp/signup',\n    signUpOrIn: '/v1/auth/notp/whatsapp/signup-in',\n    session: '/v1/auth/notp/pending-session',\n  },\n  webauthn: {\n    signUp: {\n      start: '/v1/auth/webauthn/signup/start',\n      finish: '/v1/auth/webauthn/signup/finish',\n    },\n    signIn: {\n      start: '/v1/auth/webauthn/signin/start',\n      finish: '/v1/auth/webauthn/signin/finish',\n    },\n    signUpOrIn: {\n      start: '/v1/auth/webauthn/signup-in/start',\n    },\n    update: {\n      start: 'v1/auth/webauthn/update/start',\n      finish: '/v1/auth/webauthn/update/finish',\n    },\n  },\n  password: {\n    signUp: '/v1/auth/password/signup',\n    signIn: '/v1/auth/password/signin',\n    sendReset: '/v1/auth/password/reset',\n    update: '/v1/auth/password/update',\n    replace: '/v1/auth/password/replace',\n    policy: '/v1/auth/password/policy',\n  },\n  refresh: '/v1/auth/refresh',\n  selectTenant: '/v1/auth/tenant/select',\n  logout: '/v1/auth/logout',\n  logoutAll: '/v1/auth/logoutall',\n  me: '/v1/auth/me',\n  history: '/v1/auth/me/history',\n  flow: {\n    start: '/v1/flow/start',\n    next: '/v1/flow/next',\n  },\n};\n","/** Default Descope API URL */\nexport const BASE_URL_REGION_PLACEHOLDER = '<region>';\nexport const DEFAULT_BASE_API_URL = `https://api.${BASE_URL_REGION_PLACEHOLDER}descope.com`;\n\n/** Default magic link polling interval for checking if the user clicked on the magic-link/enchanted-link/notp */\nexport const MIN_POLLING_INTERVAL_MS = 1000; // 1 second\n/** Default maximum time we are willing to wait for the magic-link/enchanted-link/notp to be clicked */\nexport const MAX_POLLING_TIMEOUT_MS = 1000 * 60 * 10; // 10 minutes\n\n/**  Descope current tenant claim */\nexport const DESCOPE_CURRENT_TENANT_CLAIM = 'dct';\n\n/** API paths to the Descope service */\nexport { default as apiPaths } from './apiPaths';\n","import { Logger } from '../../sdk/types';\nimport { Fetch } from '../types';\n\n/** Build a log message around HTTP calls  */\nconst httpLogBuilder = () => {\n  const msg: {\n    Title?: string;\n    Url?: string;\n    Method?: string;\n    Headers?: string;\n    Body?: string;\n    Status?: string;\n  } = {};\n\n  return {\n    headers(headers: HeadersInit) {\n      const headersObj =\n        typeof headers.entries === 'function'\n          ? Object.fromEntries(headers.entries())\n          : headers;\n      msg.Headers = JSON.stringify(headersObj);\n\n      return this;\n    },\n\n    body(body: string) {\n      msg.Body = body;\n      return this;\n    },\n\n    url(url: URL | string) {\n      msg.Url = url.toString();\n      return this;\n    },\n\n    method(method: string) {\n      msg.Method = method;\n      return this;\n    },\n\n    title(title: string) {\n      msg.Title = title;\n      return this;\n    },\n\n    status(status: string) {\n      msg.Status = status;\n      return this;\n    },\n\n    build() {\n      return Object.keys(msg)\n        .flatMap((key) =>\n          msg[key] ? [`${key !== 'Title' ? `${key}: ` : ''}${msg[key]}`] : []\n        )\n        .join('\\n');\n    },\n  };\n};\n\n/** Log the request object */\nconst buildRequestLog = (args: Parameters<Fetch>) =>\n  httpLogBuilder()\n    .title('Request')\n    .url(args[0])\n    .method(args[1].method)\n    .headers(args[1].headers)\n    .body(args[1].body)\n    .build();\n\n/** Log the response object */\nconst buildResponseLog = async (resp: Response) => {\n  const respBody = await resp.text();\n\n  return httpLogBuilder()\n    .title('Response')\n    .url(resp.url.toString())\n    .status(`${resp.status} ${resp.statusText}`)\n    .headers(resp.headers)\n    .body(respBody)\n    .build();\n};\n\nconst fetchWrapper =\n  (fetch: Fetch) =>\n  async (...args: Parameters<Fetch>) => {\n    const resp = await fetch(...args);\n\n    // we found out that cloning the response is problematic when using node fetch\n    // so instead, we are reading the body stream once and overriding the clone, text & json functions\n    const respText = await resp.text();\n\n    resp.text = () => Promise.resolve(respText);\n    resp.json = () => Promise.resolve(JSON.parse(respText));\n    resp.clone = () => resp;\n\n    return resp;\n  };\n\n/**\n * Create a fetch with a logger wrapped around it if a logger is given\n * @param logger Logger to send the logs to\n * @param receivedFetch Fetch to be used or built-in fetch if not provided\n *\n */\nconst createFetchLogger = (logger: Logger, receivedFetch?: Fetch) => {\n  const fetchInternal = fetchWrapper(receivedFetch || fetch);\n  if (!fetchInternal)\n    // eslint-disable-next-line no-console\n    logger?.warn(\n      'Fetch is not defined, you will not be able to send http requests, if you are running in a test, make sure fetch is defined globally'\n    );\n\n  if (!logger) return fetchInternal;\n  return async (...args: Parameters<Fetch>) => {\n    if (!fetchInternal)\n      throw Error(\n        'Cannot send http request, fetch is not defined, if you are running in a test, make sure fetch is defined globally'\n      );\n    logger.log(buildRequestLog(args));\n    const resp = await fetchInternal(...args);\n\n    logger[resp.ok ? 'log' : 'error'](await buildResponseLog(resp));\n\n    return resp;\n  };\n};\n\nexport default createFetchLogger;\n","import { Logger } from '../sdk/types';\n\n/** Request configuration including headers, query params and token */\ntype HttpClientReqConfig = {\n  headers?: HeadersInit;\n  queryParams?: { [key: string]: string };\n  token?: string;\n};\n\nexport type ExtendedResponse = Response & { cookies: Record<string, string> };\n\n/** HTTP methods we use in the client */\nexport enum HTTPMethods {\n  get = 'GET',\n  delete = 'DELETE',\n  post = 'POST',\n  put = 'PUT',\n}\n\n/** HTTP Client type that implements the HTTP method calls. Descopers can provide their own HTTP client although required only in rare cases. */\nexport type HttpClient = {\n  get: (path: string, config?: HttpClientReqConfig) => Promise<Response>;\n  post: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  put: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  delete: (path: string, config?: HttpClientReqConfig) => Promise<Response>;\n  hooks?: Hooks;\n  buildUrl: (path: string, queryParams?: { [key: string]: string }) => string;\n};\n\nexport type Fetch = typeof fetch;\n\n/** Parameters for the HTTP client. Defaults should work for most cases. */\nexport type CreateHttpClientConfig = {\n  baseUrl: string;\n  projectId: string;\n  baseConfig?: { baseHeaders: HeadersInit };\n  logger?: Logger;\n  hooks?: Hooks;\n  cookiePolicy?: RequestCredentials | null;\n  fetch?: Fetch;\n};\n\n/** For before-request hook allows overriding parts of the request */\nexport type RequestConfig = {\n  path: string;\n  headers?: HeadersInit;\n  queryParams?: { [key: string]: string };\n  body?: any;\n  method: HTTPMethods;\n  token?: string;\n};\n\nexport type BeforeRequest = (config: RequestConfig) => RequestConfig;\n\nexport type AfterRequest = (\n  req: RequestConfig,\n  res: Response,\n) => void | Promise<void>;\n\n/** Hooks before and after the request is made */\nexport type Hooks = {\n  beforeRequest?: BeforeRequest;\n  afterRequest?: AfterRequest;\n  transformResponse?: (\n    mutableResponse: ExtendedResponse,\n  ) => Promise<ExtendedResponse>;\n};\n","import { BASE_URL_REGION_PLACEHOLDER } from '../constants';\n\n/** Build URL with given parts */\nexport const urlBuilder = ({\n  path,\n  baseUrl,\n  queryParams,\n  projectId,\n}: {\n  path: string;\n  baseUrl: string;\n  queryParams?: { [key: string]: string };\n  projectId: string;\n}) => {\n  // NOTE: many URL and URLSearchParams functions and fields are NOT SUPPORTED by the react-native runtime.\n  // To add insult to injury - it adds a trailing slash almost no matter what the input is:\n  // https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Blob/URL.js#L144\n  // Do not replace unless testing with all of the core-dependent projects\n  const region = projectId.slice(1, -27);\n  baseUrl = baseUrl.replace(\n    BASE_URL_REGION_PLACEHOLDER,\n    region ? region + '.' : '',\n  );\n  // append path to base\n  let url = path\n    ? `${baseUrl.replace(/\\/$/, '')}/${path?.replace(/^\\//, '')}`\n    : baseUrl;\n\n  // add query params if given\n  if (queryParams) {\n    url = `${url}?`;\n    const keys = Object.keys(queryParams);\n    keys.forEach((key: string, index: number) => {\n      url = `${url}${key}=${queryParams[key]}${\n        index === keys.length - 1 ? '' : '&'\n      }`;\n    });\n  }\n\n  return url;\n};\n","/* eslint-disable no-nested-ternary */\n\nconst getSrcArr = (source: HeadersInit) => {\n  if (Array.isArray(source)) return source;\n  if (source instanceof Headers) return Array.from(source.entries());\n  if (!source) return [];\n  return Object.entries(source);\n};\n\n/** Merge the given list of headers into a single Headers object */\nexport const mergeHeaders = (...sources: HeadersInit[]) =>\n  new Headers(\n    sources.reduce((acc: Record<string, string>, source) => {\n      const srcArr = getSrcArr(source);\n      srcArr.reduce((_, [key, value]) => {\n        acc[key] = value;\n\n        return acc;\n      }, acc);\n\n      return acc;\n    }, {})\n  );\n\n/** Serialize the body to JSON */\nexport const serializeBody = (body: Record<string, any>) =>\n  body === undefined ? undefined : JSON.stringify(body);\n","import { transformSetCookie } from './helpers';\nimport createFetchLogger from './helpers/createFetchLogger';\nimport {\n  CreateHttpClientConfig,\n  HttpClient,\n  HTTPMethods,\n  RequestConfig,\n} from './types';\nimport { urlBuilder } from './urlBuilder';\nimport { mergeHeaders, serializeBody } from './utils';\n\n/**\n * Create a Bearer authorization header with concatenated projectId and token\n * @param projectId The project id to use in the header\n * @param token Token to be concatenated. Defaults to empty.\n */\nconst createAuthorizationHeader = (projectId: string, token = '') => {\n  let bearer = projectId;\n  if (token) {\n    bearer = bearer + ':' + token;\n  }\n  return {\n    Authorization: `Bearer ${bearer}`,\n  };\n};\n\ndeclare const BUILD_VERSION: string;\n\n/**\n * Create descope custom headers\n */\nconst createDescopeHeaders = () => {\n  return {\n    'x-descope-sdk-name': 'core-js',\n    'x-descope-sdk-version': BUILD_VERSION,\n  };\n};\n\n/**\n * Create the HTTP client used to send HTTP requests to the Descope API\n *\n * @param CreateHttpClientConfig Configuration for the client\n */\nconst createHttpClient = ({\n  baseUrl,\n  projectId,\n  baseConfig,\n  logger,\n  hooks,\n  cookiePolicy,\n  fetch,\n}: CreateHttpClientConfig): HttpClient => {\n  const fetchWithLogger = createFetchLogger(logger, fetch);\n\n  const sendRequest = async (config: RequestConfig) => {\n    const requestConfig = hooks?.beforeRequest\n      ? hooks.beforeRequest(config)\n      : config;\n\n    const { path, body, headers, queryParams, method, token } = requestConfig;\n\n    const requestInit: RequestInit = {\n      headers: mergeHeaders(\n        createAuthorizationHeader(projectId, token),\n        createDescopeHeaders(),\n        baseConfig?.baseHeaders || {},\n        headers,\n      ),\n      method,\n      body: serializeBody(body),\n    };\n\n    // On edge runtimes like Cloudflare, the fetch implementation does not support credentials\n    // so we allow the caller to omit by specifying null\n    // See https://github.com/cloudflare/workerd/blob/main/src/workerd/api/http.h#L591\n    if (cookiePolicy !== null) {\n      requestInit.credentials = cookiePolicy || 'include';\n    }\n\n    const res = await fetchWithLogger(\n      urlBuilder({ path, baseUrl, queryParams, projectId }),\n      requestInit,\n    );\n\n    if (hooks?.afterRequest) {\n      await hooks.afterRequest(config, res?.clone());\n    }\n\n    if (hooks?.transformResponse) {\n      const json = await res.json();\n      const cookies = transformSetCookie(res.headers?.get('set-cookie') || '');\n      const mutableResponse = {\n        ...res,\n        json: () => Promise.resolve(json),\n        cookies,\n      };\n      // we want to make sure cloning the response will keep the transformed json data\n      mutableResponse.clone = () => mutableResponse;\n      return hooks.transformResponse(mutableResponse);\n    }\n\n    return res;\n  };\n\n  return {\n    get: (path: string, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body: undefined,\n        method: HTTPMethods.get,\n        token,\n      }),\n    post: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.post,\n        token,\n      }),\n    put: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.put,\n        token,\n      }),\n    delete: (path, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body: undefined,\n        method: HTTPMethods.delete,\n        token,\n      }),\n    hooks,\n    buildUrl: (path, queryParams) => {\n      return urlBuilder({ projectId, baseUrl, path, queryParams });\n    },\n  };\n};\n\nexport default createHttpClient;\nexport type { HttpClient };\n","export { default as createFetchLogger } from './createFetchLogger';\n\nexport function transformSetCookie(setCookieHeader: string) {\n  // Split the header by semicolons to separate different attributes\n  var cookiesString = setCookieHeader.split(';');\n\n  return cookiesString.reduce((acc, cookie) => {\n    const [key, value] = cookie.split('=');\n    return {\n      ...acc,\n      [key.trim()]: value,\n    };\n  }, {});\n}\n","export default {\n  TOO_MANY_REQUESTS: 429,\n};\n","import jwtDecode, { JwtPayload } from 'jwt-decode';\nimport { ResponseData, SdkResponse } from '../types';\nimport HttpStatusCodes from '../../constants/httpStatusCodes';\nimport { DESCOPE_CURRENT_TENANT_CLAIM } from '../../constants';\n\nfunction getJwtAuthorizationItems(\n  token: string,\n  tenant: string,\n  claim: string,\n): string[] {\n  let claims: any = parseJwt(token);\n  if (tenant) {\n    if (!claims?.tenants && claims?.[DESCOPE_CURRENT_TENANT_CLAIM] === tenant) {\n      // The token may have the current tenant in the \"dct\" claim and without the \"tenants\" claim\n      return claims?.[claim] || [];\n    } else {\n      claims = claims?.tenants?.[tenant];\n    }\n  }\n  const items = claims?.[claim];\n  return Array.isArray(items) ? items : [];\n}\n\nfunction parseJwt(token: string): JwtPayload {\n  if (typeof token !== 'string' || !token)\n    throw new Error('Invalid token provided');\n  return jwtDecode(token);\n}\n\n/**\n * Checks if the given JWT is still valid but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function isJwtExpired(token: string): boolean {\n  const { exp } = parseJwt(token);\n  const currentTime = new Date().getTime() / 1000;\n  return currentTime > exp;\n}\n\n/**\n * Returns the list of tenants in the given JWT\n *\n * @param token JWT token\n */\nexport function getTenants(token: string): string[] {\n  let claims: any = parseJwt(token);\n  const items = Object.keys(claims?.tenants);\n  return Array.isArray(items) ? items : [];\n}\n\n/**\n * Returns the list of permissions granted in the given JWT but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function getJwtPermissions(token: string, tenant?: string): string[] {\n  return getJwtAuthorizationItems(token, tenant, 'permissions');\n}\n\n/**\n * Returns the list of roles specified in the given JWT but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function getJwtRoles(token: string, tenant?: string): string[] {\n  return getJwtAuthorizationItems(token, tenant, 'roles');\n}\n\n/** Joins path parts making sure there is only one path separator between parts */\nexport const pathJoin = (...args: string[]) =>\n  args.join('/').replace(/\\/{2,}/g, '/');\n\n/** Transform the Promise Response to our internal SdkResponse implementation\n * @param response The Response promise from fetch\n * @param transform Optionally transform the response JSON to another type\n */\nexport async function transformResponse<\n  T extends ResponseData,\n  S extends ResponseData = T,\n>(\n  response: Promise<Response>,\n  transform?: (data: T) => S,\n): Promise<SdkResponse<S>> {\n  const resp = await response;\n\n  const ret: SdkResponse<S> = {\n    code: resp.status,\n    ok: resp.ok,\n    response: resp,\n  };\n\n  const data = await resp.clone().json();\n\n  if (!resp.ok) {\n    ret.error = data;\n\n    if (resp.status === HttpStatusCodes.TOO_MANY_REQUESTS) {\n      Object.assign(ret.error, {\n        retryAfter: Number.parseInt(resp.headers?.get('retry-after')) || 0,\n      });\n    }\n  } else if (transform) {\n    ret.data = transform(data);\n  } else {\n    ret.data = <S>data;\n  }\n\n  return ret;\n}\n","import { Validator, ValidationRule, MakeValidator } from './types';\n\nexport const createValidator =\n  (rule: ValidationRule, defaultMsg?: string): MakeValidator =>\n  (msg = defaultMsg) =>\n  (val) =>\n    !rule(val) ? msg.replace('{val}', val) : false;\n\nexport const createOrValidator =\n  (validators: Validator[], defaultMsg?: string): MakeValidator =>\n  (msg = defaultMsg) =>\n  (val) => {\n    const errors = validators.filter((validator) => validator(val));\n\n    if (errors.length < validators.length) return false;\n\n    return msg ? msg.replace('{val}', val) : errors.join(' OR ');\n  };\n\nexport const createValidation = (...validators: Validator[]) => ({\n  validate: (val: any) => {\n    validators.forEach((validator) => {\n      const errMsg = validator(val);\n      if (errMsg) throw new Error(errMsg);\n    });\n\n    return true;\n  },\n});\n","import { createOrValidator, createValidation, createValidator } from './core';\nimport { Validator } from './types';\n\nconst regexMatch = (regex: RegExp) => (val: any) => regex.test(val);\n\nconst validateString = (val: any) => typeof val === 'string';\n\nconst validateUndefined = (val: any) => val === undefined;\n\nconst validateEmail = regexMatch(\n  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n);\n\n// A replacement for lodash.get, because it may not integrate well in various runtime environments (Edge).\n// Implementation is based on https://gist.github.com/dfkaye/59263b51cf1e0b633181c5f44ae2066a\nconst get = (object: any, pathName: string, defaultValue?: any) => {\n  // Coerce pathName to a string (even it turns into \"[object Object]\").\n  const path = Array.isArray(pathName) ? pathName.join('.') : String(pathName);\n\n  // Support bracket notation, e.g., \"a[0].b.c\".\n  const match = /\\[\\\\?(\"|')?(\\w|d)+\\\\?(\"|')?\\]/g;\n\n  const parts = path.replace(match, (m, i, v) => '.' + v).split('.');\n\n  const length = parts.length;\n  let i = 0;\n\n  // In case object isn't a real object, set it to undefined.\n  let value = object === Object(object) ? object : undefined;\n\n  while (value != null && i < length) {\n    value = value[parts[i++]];\n  }\n\n  /**\n   * returns the resolved value if\n   * 1. iteration happened (i > 0)\n   * 2. iteration completed (i === length)\n   * 3. the value at the path is found in the data structure (not undefined). Note that if the path is found but the\n   *    value is null, then null is returned.\n   * If any of those checks fails, return the defaultValue param, if provided.\n   */\n  return i && i === length && value !== undefined ? value : defaultValue;\n};\n\nconst validatePhone = regexMatch(/^\\+[1-9]{1}[0-9]{3,14}$/);\nconst validateMinLength = (min: number) => (val: any) => val.length >= min;\n// const validatePlainObject = (val: any) => !!val && Object.getPrototypeOf(val) === Object.prototype;\nconst validatePathValue = (path: string, rules: Validator[]) => (val: any) =>\n  createValidation(...rules).validate(get(val, path));\n\nexport const isEmail = createValidator(\n  validateEmail,\n  '\"{val}\" is not a valid email',\n);\nexport const isPhone = createValidator(\n  validatePhone,\n  '\"{val}\" is not a valid phone number',\n);\nexport const isNotEmpty = createValidator(\n  validateMinLength(1),\n  'Minimum length is 1',\n);\nexport const isString = createValidator(\n  validateString,\n  'Input is not a string',\n);\n\nexport const isUndefined = createValidator(\n  validateUndefined,\n  'Input is defined',\n);\n\nexport const isStringOrUndefined = createOrValidator(\n  [isString(), isUndefined()],\n  'Input is not a string or undefined',\n);\n\n// export const isPlainObject = createValidator(validatePlainObject, 'Input is not a plain object');\nexport const hasPathValue = (path: string, rules: Validator[]) =>\n  createValidator(validatePathValue(path, rules))();\n","import { createValidation } from './core';\nimport { Validator } from './types';\nimport {\n  isEmail,\n  isNotEmpty,\n  isPhone,\n  isString,\n  isStringOrUndefined,\n} from './validators';\n\n/**\n *\n * Validate that all of the validators passes\n * @params each parameter is an array of validators, those validators will be verified against the wrapped function argument which in the same place\n * @throws if any of the validators fails, an error with the relevant message will be thrown\n */\nexport const withValidations =\n  (...argsRules: Validator[][]) =>\n  <T extends Array<any>, U>(fn: (...args: T) => U) =>\n  (...args: T): U => {\n    argsRules.forEach((rulesArr, i) =>\n      createValidation(...rulesArr).validate(args[i]),\n    );\n\n    return fn(...args);\n  };\n\nexport const string = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n];\n\nexport const isStringOrUndefinedValidator = (fieldName: string) => [\n  isStringOrUndefined(`\"${fieldName}\" must be string or undefined`),\n];\n\nexport const stringNonEmpty = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isNotEmpty(`\"${fieldName}\" must not be empty`),\n];\nexport const stringEmail = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isEmail(),\n];\nexport const stringPhone = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isPhone(),\n];\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  AccessKeyLoginOptions,\n  ExchangeAccessKeyResponse,\n  SdkResponse,\n} from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst withExchangeValidations = withValidations(stringNonEmpty('accessKey'));\n\nconst withAccessKeys = (httpClient: HttpClient) => ({\n  exchange: withExchangeValidations(\n    (\n      accessKey: string,\n      loginOptions?: AccessKeyLoginOptions,\n    ): Promise<SdkResponse<ExchangeAccessKeyResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.accessKey.exchange,\n          { loginOptions },\n          { token: accessKey },\n        ),\n      ),\n  ),\n});\n\nexport default withAccessKeys;\n","/* eslint-disable import/exports-last */\nimport { ResponseData } from '../../sdk/types';\nimport { SdkFnWrapper, ReplacePaths, SdkFnsPaths } from './types';\n\n/**\n * A wrapper function that allows to wrap multiple Sdk function\n * @param obj: The Sdk instance you want to wrap\n * @param paths: A readonly list of paths of the functions you want to wrap\n * @param wrapper: Your wrapper function, it should gets an Sdk function and return a new Sdk function\n * @returns a mutated instance of the Sdk with updated type definitions based on your wrapper return type\n *\n * Usage example:\n *\n * // Assuming this is our SDK instance\n * const sdk = {\n *    me: (token) => {...}\n *    flow: {\n *       start: (...params) => {...}\n *       next: (...params) => {...}\n *    }\n *    ...\n * }\n *\n * // This is our wrapper\n * const wrapper = (sdkFn) => async (...args) => {\n *    const sdkResponse = await sdkFn(...args)\n *\n *    // Modify return value\n *    return {...sdkResponse, data: {...sdkResponse.data, myCustomAttribute: 'hello'}}\n * }\n *\n * // And those are the paths we want to wrap\n * const paths = ['flow.start', 'flow.next'] as const // You MUST add as const!\n *\n * // We can wrap our SDK functions with the wrapper we created in this way\n * const newlyTypedSdk = wrapWith(sdk, paths, wrapper)\n *\n * Now the 2 wrapped functions will have the updated type based on the wrapper return value\n */\n\nconst wrapWith = <\n  Obj extends object,\n  Paths extends ReadonlyArray<SdkFnsPaths<Obj>>,\n  WrapperData extends ResponseData\n>(\n  obj: Obj,\n  paths: Paths,\n  wrapper: SdkFnWrapper<WrapperData>\n): ReplacePaths<Obj, Paths, WrapperData> => {\n  paths.forEach((path) => {\n    const sections = path.split('.');\n    let section = sections.shift();\n    let currentRef: Record<string, any> = obj;\n\n    while (sections.length > 0) {\n      currentRef = currentRef[section];\n\n      if (!section || !currentRef) {\n        throw Error(\n          `Invalid path \"${path}\", \"${section}\" is missing or has no value`\n        );\n      }\n\n      section = sections.shift();\n    }\n\n    if (typeof currentRef[section] !== 'function') {\n      throw Error(`\"${path}\" is not a function`);\n    }\n    const origFn = currentRef[section];\n    currentRef[section] = wrapper(origFn);\n  });\n\n  return obj as any;\n};\n\nexport default wrapWith;\n","import { MAX_POLLING_TIMEOUT_MS, MIN_POLLING_INTERVAL_MS } from '../constants';\n\n/** Polling configuration with defaults and normalizing checks */\nexport const normalizeWaitForSessionConfig = ({\n  pollingIntervalMs = MIN_POLLING_INTERVAL_MS,\n  timeoutMs = MAX_POLLING_TIMEOUT_MS,\n} = {}) => ({\n  pollingIntervalMs: Math.max(\n    pollingIntervalMs || MIN_POLLING_INTERVAL_MS,\n    MIN_POLLING_INTERVAL_MS,\n  ),\n  timeoutMs: Math.min(\n    timeoutMs || MAX_POLLING_TIMEOUT_MS,\n    MAX_POLLING_TIMEOUT_MS,\n  ),\n});\n","type DeviceInfo = {\n  webAuthnSupport?: boolean;\n};\n\ntype LastAuth = {\n  authMethod?: AuthMethod;\n  oauthProvider?: string;\n  name?: string;\n  loginId?: string;\n};\n\ntype RedirectAuth = {\n  callbackUrl: string;\n  codeChallenge: string;\n};\n\ntype AuthMethod =\n  | 'magiclink'\n  | 'enchantedlink'\n  | 'otp'\n  | 'totp'\n  | 'oauth'\n  | 'saml'\n  | 'webauthn';\n\nexport type SdkFn = (...args: any[]) => Promise<SdkResponse<ResponseData>>;\n\nexport type MaskedPhone = {\n  maskedPhone: string;\n};\n\nexport type MaskedEmail = {\n  maskedEmail: string;\n};\n\n/** User base details from Descope API */\nexport type User = {\n  email?: string;\n  name?: string;\n  givenName?: string;\n  middleName?: string;\n  familyName?: string;\n  phone?: string;\n};\n\n/** User extended details from Descope API */\nexport type UserResponse = User & {\n  loginIds: string[];\n  userId: string;\n  verifiedEmail?: boolean;\n  verifiedPhone?: boolean;\n  picture?: string;\n  roleNames?: string[];\n  userTenants?: UserTenant[];\n  createTime: number;\n  TOTP: boolean;\n  SAML: boolean;\n  OAuth?: Record<string, boolean>;\n  customAttributes?: Record<string, any>;\n  status: string;\n};\n\nexport type UserHistoryResponse = {\n  userId: string;\n  loginTime: number;\n  city: string;\n  country: string;\n  ip: string;\n};\n\n/** A tenant association mapping  */\nexport type UserTenant = {\n  tenantId: string;\n  roleNames?: string[];\n  tenantName: string;\n};\n\nexport type TemplateOptions = Record<string, string>; // for providing messaging template options (templates that are being sent via email / text message)\n\n/** Login options to be added to the different authentication methods */\nexport type LoginOptions = {\n  stepup?: boolean;\n  mfa?: boolean;\n  customClaims?: Record<string, any>;\n  templateOptions?: TemplateOptions;\n};\n\n/** Access key login options to be added to the different authentication methods */\nexport type AccessKeyLoginOptions = {\n  customClaims?: Record<string, any>;\n};\n\n/** Sign Up options to be added to the different authentication methods */\nexport type SignUpOptions = {\n  customClaims?: Record<string, any>;\n  templateOptions?: TemplateOptions;\n};\n\n/** Authentication info result from the various JWT validations  */\nexport type JWTResponse = {\n  sessionJwt: string;\n  refreshJwt?: string;\n  cookieDomain?: string;\n  cookiePath?: string;\n  cookieMaxAge?: number;\n  cookieExpiration?: number;\n  user?: UserResponse;\n  firstSeen?: boolean;\n};\n\n/** Authentication info result from exchanging access keys for a session */\nexport type ExchangeAccessKeyResponse = {\n  keyId: string;\n  sessionJwt: string;\n  expiration: number;\n};\n\n/** The response returned from the various start webauthn functions */\nexport type WebAuthnStartResponse = {\n  transactionId: string;\n  options: string;\n  create: boolean;\n};\n\n/** Enchanted link response */\nexport type EnchantedLinkResponse = {\n  /** Pending reference URL to poll while waiting for user to click magic link */\n  pendingRef: string;\n  /** Link id, on which link the user should click */\n  linkId: string;\n  /** Email to which the link was sent to */\n  maskedEmail: string;\n};\n\n/** URL response to redirect user in case of OAuth or SSO */\nexport type URLResponse = {\n  url: string;\n};\n\n/** TOTP response with the TOTP details */\nexport type TOTPResponse = {\n  provisioningURL: string;\n  image: string;\n  key: string;\n};\n\n/** Password reset response with details according to response method */\nexport type PasswordResetResponse = {\n  resetMethod: string;\n  pendingRef?: string;\n  linkId?: string;\n  maskedEmail: string;\n};\n\n/** A subset of the password policy that can be checked on the client side for better UX */\nexport type PasswordPolicyResponse = {\n  minLength: number;\n  lowercase: boolean;\n  uppercase: boolean;\n  number: boolean;\n  nonAlphanumeric: boolean;\n};\n\n/** Phone delivery methods which are currently supported */\nexport enum DeliveryPhone {\n  sms = 'sms',\n  voice = 'voice',\n  whatsapp = 'whatsapp',\n}\n\nexport enum DeliveryEmail {\n  email = 'email',\n}\n\n/** All delivery methods currently supported */\nexport type DeliveryMethods = DeliveryPhone | DeliveryEmail;\n\nexport const DeliveryMethods = {\n  ...DeliveryPhone,\n  ...DeliveryEmail,\n} as const;\n\n/** All flow execution statuses\n *  - waiting - flow execution is waiting for user interaction\n *  - running - flow execution is currently running\n *  - completed - flow execution completed successfully\n *  - failed - flow execution failed\n */\nexport enum FlowStatus {\n  waiting = 'waiting',\n  running = 'running',\n  completed = 'completed',\n  failed = 'failed',\n}\n\n/** All flow response action\n *  - screen - next action is to render  screen\n *  - poll - next action is poll for next after timeout\n *  - redirect - next action is to redirect (redirection details in 'redirect' attribute)\n *  - webauthnCreate/webauthnGet - next action is to prompt webauthn (details in 'webauthn' attribute)\n *  - none - no next action\n */\nexport type FlowAction =\n  | 'screen'\n  | 'poll'\n  | 'redirect'\n  | 'webauthnCreate'\n  | 'webauthnGet'\n  | 'none';\n\nexport type ComponentsConfig = Record<string, any>;\n\n/** Flow response with flow execution details */\nexport type FlowResponse = {\n  // current execution identifier\n  executionId: string;\n  // current step identifier\n  stepId: string;\n  // current step name\n  stepName: string;\n  // flow execution status\n  status: FlowStatus;\n  // the next required action\n  action: FlowAction;\n  // screen data - if action is 'screen'\n  screen?: {\n    // screen identifier\n    id: string;\n    // extra dynamic state required for rendering screen\n    state: Record<string, any>;\n    componentsConfig: ComponentsConfig;\n  };\n  // redirect data - if action is 'redirect'\n  redirect?: {\n    url: string;\n  };\n  // SAML IDP response (this will be used to build the html form response goes from the IDP through the end user browser to the SP)\n  samlIdpResponse?: {\n    url: string;\n    samlResponse: string;\n    relayState: string;\n  };\n  // a URL to open in a new tab\n  openInNewTabUrl?: string;\n  // webauthn data - if action is one of 'webauthnCreate', 'webauthnGet'\n  webauthn?: {\n    transactionId: string;\n    options: string;\n    create: boolean;\n  };\n  // an error that occurred during flow execution, used for debugging / integrating\n  error?: {\n    code: string;\n    description: string;\n    message: string;\n  };\n  // authentication information response, if response is authenticated\n  authInfo?: JWTResponse;\n  lastAuth?: Pick<LastAuth, 'authMethod' | 'oauthProvider'>;\n};\n\nexport type Options = {\n  redirectUrl?: string;\n  location?: string;\n  tenant?: string;\n  deviceInfo?: DeviceInfo;\n  lastAuth?: LastAuth;\n  redirectAuth?: RedirectAuth;\n  oidcIdpStateId?: string;\n  preview?: boolean;\n  samlIdpStateId?: string;\n  samlIdpUsername?: string;\n  ssoAppId?: string;\n  oidcLoginHint?: string;\n  abTestingKey?: number;\n  startOptionsVersion?: number;\n  client?: Record<string, any>;\n  locale?: string;\n};\n\nexport type ResponseData = Record<string, any>;\n\n/**\n * Response from our SDK calls which includes the result (ok, code, error).\n * The relevant data is provided in the more specific interfaces extending SdkResponse.\n */\nexport type SdkResponse<T extends ResponseData> = {\n  code?: number;\n  ok: boolean;\n  response?: Response;\n  error?: {\n    errorCode: string;\n    errorDescription: string;\n    errorMessage?: string;\n    retryAfter?: string;\n  };\n  data?: T;\n};\n\n/** Different delivery method */\nexport type Deliveries<T extends Record<DeliveryMethods, SdkFn>> = {\n  [S in DeliveryMethods]: T[S];\n};\n\nexport type DeliveriesPhone<T extends Record<DeliveryPhone, SdkFn> | SdkFn> = {\n  [S in DeliveryPhone]: T extends Record<DeliveryPhone, SdkFn> ? T[S] : T;\n};\n\n/** Map different functions to email vs phone (sms, whatsapp, voice) */\nexport type DeliveriesMap<EmailFn extends SdkFn, PhoneFn extends SdkFn> = {\n  [S in DeliveryMethods]: S extends 'email' ? EmailFn : PhoneFn;\n};\n\n/** Logger type that supports the given levels (debug, log, error) */\nexport type Logger = Pick<Console, 'debug' | 'log' | 'error' | 'warn'>;\n\n/** Polling configuration for session waiting */\nexport type WaitForSessionConfig = {\n  pollingIntervalMs: number;\n  timeoutMs: number;\n};\n\nexport type UpdateOptions<T extends boolean> = {\n  addToLoginIDs?: T;\n  onMergeUseExisting?: T extends true ? boolean : never;\n  templateOptions?: TemplateOptions;\n};\n","import {\n  stringNonEmpty,\n  withValidations,\n  stringPhone,\n  stringEmail,\n} from '../validations';\n\nexport const loginIdValidations = stringNonEmpty('loginId');\nexport const withVerifyValidations = withValidations(stringNonEmpty('token'));\nexport const withSignValidations = withValidations(loginIdValidations);\nexport const withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef')\n);\nexport const withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone')\n);\nexport const withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email')\n);\n","import {\n  apiPaths,\n  MAX_POLLING_TIMEOUT_MS,\n  MIN_POLLING_INTERVAL_MS,\n} from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { normalizeWaitForSessionConfig } from '../../utils';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  SdkResponse,\n  JWTResponse,\n  EnchantedLinkResponse,\n  User,\n  LoginOptions,\n  UpdateOptions,\n  SignUpOptions,\n  WaitForSessionConfig,\n} from '../types';\nimport {\n  withWaitForSessionValidations,\n  withSignValidations,\n  withVerifyValidations,\n  withUpdateEmailValidations,\n} from './validations';\n\nconst withEnchantedLink = (httpClient: HttpClient) => ({\n  verify: withVerifyValidations(\n    (token: string): Promise<SdkResponse<never>> =>\n      transformResponse(\n        httpClient.post(apiPaths.enchantedLink.verify, { token }),\n      ),\n  ),\n\n  signIn: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signIn, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            loginOptions,\n          },\n          { token },\n        ),\n      ),\n  ),\n\n  signUpOrIn: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signUpOrIn, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            loginOptions: signUpOptions,\n          },\n        ),\n      ),\n  ),\n\n  signUp: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      user?: User,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signUp, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            user,\n            loginOptions: signUpOptions,\n          },\n        ),\n      ),\n  ),\n\n  waitForSession: withWaitForSessionValidations(\n    (\n      pendingRef: string,\n      config?: WaitForSessionConfig,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      new Promise((resolve) => {\n        const { pollingIntervalMs, timeoutMs } =\n          normalizeWaitForSessionConfig(config);\n        let timeout: NodeJS.Timeout | undefined;\n        const interval = setInterval(async () => {\n          const resp = await httpClient.post(apiPaths.enchantedLink.session, {\n            pendingRef,\n          });\n          if (resp.ok) {\n            clearInterval(interval);\n            if (timeout) clearTimeout(timeout);\n            resolve(transformResponse(Promise.resolve(resp)));\n          }\n        }, pollingIntervalMs);\n\n        timeout = setTimeout(() => {\n          resolve({\n            error: {\n              errorDescription: `Session polling timeout exceeded: ${timeoutMs}ms`,\n              errorCode: '0',\n            },\n            ok: false,\n          });\n          clearInterval(interval);\n        }, timeoutMs);\n      }),\n  ),\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        URI?: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>,\n      ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.enchantedLink.update.email,\n            { loginId, email, URI, ...updateOptions },\n            { token },\n          ),\n        ),\n    ),\n  },\n});\n\nexport default withEnchantedLink;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport { FlowResponse, Options, SdkResponse } from '../types';\nimport { stringNonEmpty, withValidations } from '../validations';\nimport { FlowInput } from './types';\n\nconst withStartValidations = withValidations(stringNonEmpty('flowId'));\nconst withNextValidations = withValidations(\n  stringNonEmpty('executionId'),\n  stringNonEmpty('stepId'),\n  stringNonEmpty('interactionId'),\n);\n\nconst withFlow = (httpClient: HttpClient) => ({\n  start: withStartValidations(\n    (\n      flowId: string,\n      options?: Options,\n      conditionInteractionId?: string,\n      interactionId?: string,\n      version?: number,\n      componentsVersion?: string,\n      input?: FlowInput,\n    ): Promise<SdkResponse<FlowResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.flow.start, {\n          flowId,\n          options,\n          conditionInteractionId,\n          interactionId,\n          version,\n          componentsVersion,\n          input,\n        }),\n      ),\n  ),\n  next: withNextValidations(\n    (\n      executionId: string,\n      stepId: string,\n      interactionId: string,\n      version?: number,\n      componentsVersion?: string,\n      input?: FlowInput,\n    ): Promise<SdkResponse<FlowResponse>> => {\n      return transformResponse(\n        httpClient.post(apiPaths.flow.next, {\n          executionId,\n          stepId,\n          interactionId,\n          version,\n          componentsVersion,\n          input,\n        }),\n      );\n    },\n  ),\n});\n\nexport default withFlow;\n","import {\n  stringNonEmpty,\n  withValidations,\n  stringPhone,\n  stringEmail,\n} from '../validations';\n\nexport const loginIdValidations = stringNonEmpty('loginId');\nexport const withVerifyValidations = withValidations(stringNonEmpty('token'));\nexport const withSignValidations = withValidations(loginIdValidations);\nexport const withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef')\n);\nexport const withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone')\n);\nexport const withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email')\n);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  DeliveryPhone,\n  SdkResponse,\n  JWTResponse,\n  User,\n  LoginOptions,\n  MaskedEmail,\n  UpdateOptions,\n  SignUpOptions,\n} from '../types';\nimport { MagicLink, Routes } from './types';\nimport {\n  withSignValidations,\n  withVerifyValidations,\n  withUpdateEmailValidations,\n  withUpdatePhoneValidations,\n} from './validations';\n\nconst deliveryMethods = Object.keys(DeliveryMethods).filter(d => d !== DeliveryPhone.voice);\n\nconst withMagicLink = (httpClient: HttpClient) => ({\n  verify: withVerifyValidations(\n    (token: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.magicLink.verify, { token })),\n  ),\n\n  signIn: deliveryMethods.reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (\n          loginId: string,\n          URI?: string,\n          loginOptions?: LoginOptions,\n          token?: string,\n        ) =>\n          transformResponse(\n            httpClient.post(\n              pathJoin(apiPaths.magicLink.signIn, delivery),\n              { loginId, URI, loginOptions },\n              { token },\n            ),\n          ),\n      ),\n    }),\n    {},\n  ) as MagicLink[Routes.signIn],\n\n  signUp: deliveryMethods.reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (\n          loginId: string,\n          URI?: string,\n          user?: User,\n          signUpOptions?: SignUpOptions,\n        ) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.magicLink.signUp, delivery), {\n              loginId,\n              URI,\n              user,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as MagicLink[Routes.signUp],\n\n  signUpOrIn: deliveryMethods.reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, URI?: string, signUpOptions?: SignUpOptions) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.magicLink.signUpOrIn, delivery), {\n              loginId,\n              URI,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as MagicLink[Routes.signUpOrIn],\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        URI?: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>,\n      ): Promise<SdkResponse<MaskedEmail>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.magicLink.update.email,\n            { loginId, email, URI, ...updateOptions },\n            { token },\n          ),\n        ),\n    ),\n    phone: Object.keys(DeliveryPhone).filter(d => d !== DeliveryPhone.voice).reduce(\n      (acc, delivery) => ({\n        ...acc,\n        [delivery]: withUpdatePhoneValidations(\n          <T extends boolean>(\n            loginId: string,\n            phone: string,\n            URI?: string,\n            token?: string,\n            updateOptions?: UpdateOptions<T>,\n          ) =>\n            transformResponse(\n              httpClient.post(\n                pathJoin(apiPaths.magicLink.update.phone, delivery),\n                { loginId, phone, URI, ...updateOptions },\n                { token },\n              ),\n            ),\n        ),\n      }),\n      {},\n    ) as MagicLink[Routes.updatePhone],\n  },\n});\n\nexport default withMagicLink;\n","import { SdkResponse, URLResponse, JWTResponse, LoginOptions } from '../types';\n\nenum OAuthProviders {\n  facebook = 'facebook',\n  github = 'github',\n  google = 'google',\n  microsoft = 'microsoft',\n  gitlab = 'gitlab',\n  apple = 'apple',\n  discord = 'discord',\n  linkedin = 'linkedin',\n  slack = 'slack',\n}\n\ntype VerifyFn = (code: string) => Promise<SdkResponse<JWTResponse>>;\nexport type StartFn = (\n  redirectURL?: string,\n  loginOptions?: LoginOptions,\n  token?: string\n) => Promise<SdkResponse<URLResponse>>;\n\nexport type Providers<T> = Record<keyof typeof OAuthProviders, T>;\n\nexport type Oauth = {\n  start: Providers<StartFn>;\n  verify: Providers<VerifyFn>;\n};\n\nexport { OAuthProviders };\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { SdkResponse, JWTResponse, LoginOptions } from '../types';\nimport { transformResponse } from '../helpers';\nimport { Oauth, OAuthProviders } from './types';\nimport { stringNonEmpty, withValidations } from '../validations';\n\nconst withExchangeValidations = withValidations(stringNonEmpty('code'));\nconst withOauth = (httpClient: HttpClient) => ({\n  start: Object.assign(\n    (\n      provider: string,\n      redirectUrl?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n    ) => {\n      return transformResponse(\n        httpClient.post(apiPaths.oauth.start, loginOptions || {}, {\n          queryParams: {\n            provider,\n            ...(redirectUrl && { redirectURL: redirectUrl }),\n          },\n          token,\n        }),\n      );\n    },\n    Object.keys(OAuthProviders).reduce(\n      (acc, provider) => ({\n        ...acc,\n        [provider]: (\n          redirectUrl?: string,\n          loginOptions?: LoginOptions,\n          token?: string,\n        ) =>\n          transformResponse(\n            httpClient.post(apiPaths.oauth.start, loginOptions || {}, {\n              queryParams: {\n                provider,\n                ...(redirectUrl && { redirectURL: redirectUrl }),\n              },\n              token,\n            }),\n          ),\n      }),\n      {},\n    ) as Oauth['start'],\n  ),\n  exchange: withExchangeValidations(\n    (code: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.oauth.exchange, { code })),\n  ),\n  startNative: (\n    provider: string,\n    loginOptions?: LoginOptions,\n    implicit?: boolean,\n  ) =>\n    transformResponse(\n      httpClient.post(apiPaths.oauth.startNative, {\n        provider,\n        loginOptions,\n        implicit,\n      }),\n    ),\n  finishNative: (\n    provider: string,\n    stateId: string,\n    user?: string,\n    code?: string,\n    idToken?: string,\n  ) =>\n    transformResponse(\n      httpClient.post(apiPaths.oauth.finishNative, {\n        provider,\n        stateId,\n        user,\n        code,\n        idToken,\n      }),\n    ),\n});\n\nexport default withOauth;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  User,\n  SdkResponse,\n  JWTResponse,\n  DeliveryPhone,\n  LoginOptions,\n  MaskedEmail,\n  UpdateOptions,\n  SignUpOptions,\n} from '../types';\nimport {\n  stringEmail,\n  stringNonEmpty,\n  stringPhone,\n  withValidations,\n} from '../validations';\nimport { Otp, Routes } from './types';\n\nconst loginIdValidations = stringNonEmpty('loginId');\nconst withVerifyValidations = withValidations(\n  loginIdValidations,\n  stringNonEmpty('code'),\n);\nconst withSignValidations = withValidations(loginIdValidations);\nconst withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone'),\n);\nconst withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email'),\n);\n\nconst withOtp = (httpClient: HttpClient) => ({\n  verify: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withVerifyValidations(\n        (loginId: string, code: string): Promise<SdkResponse<JWTResponse>> =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.verify, delivery), {\n              code,\n              loginId,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.verify],\n\n  signIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, loginOptions?: LoginOptions, token?: string) =>\n          transformResponse(\n            httpClient.post(\n              pathJoin(apiPaths.otp.signIn, delivery),\n              { loginId, loginOptions },\n              { token },\n            ),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.signIn],\n\n  signUp: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, user?: User, signUpOptions?: SignUpOptions) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.signUp, delivery), {\n              loginId,\n              user,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.signUp],\n\n  signUpOrIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, signUpOptions?: SignUpOptions) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.signUpOrIn, delivery), {\n              loginId,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.signIn],\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>,\n      ): Promise<SdkResponse<MaskedEmail>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.otp.update.email,\n            { loginId, email, ...updateOptions },\n            { token },\n          ),\n        ),\n    ),\n    phone: Object.keys(DeliveryPhone).reduce(\n      (acc, delivery) => ({\n        ...acc,\n        [delivery]: withUpdatePhoneValidations(\n          <T extends boolean>(\n            loginId: string,\n            phone: string,\n            token?: string,\n            updateOptions?: UpdateOptions<T>,\n          ) =>\n            transformResponse(\n              httpClient.post(\n                pathJoin(apiPaths.otp.update.phone, delivery),\n                { loginId, phone, ...updateOptions },\n                { token },\n              ),\n            ),\n        ),\n      }),\n      {},\n    ) as Otp[Routes.updatePhone],\n  },\n});\n\nexport default withOtp;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport { SdkResponse, URLResponse, JWTResponse, LoginOptions } from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst withStartValidations = withValidations(stringNonEmpty('tenant'));\nconst withExchangeValidations = withValidations(stringNonEmpty('code'));\n\nconst withSaml = (httpClient: HttpClient) => ({\n  start: withStartValidations(\n    (\n      tenantIdOrEmail: string,\n      redirectUrl?: string,\n      loginOptions?: LoginOptions,\n      token?: string\n    ): Promise<SdkResponse<URLResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.saml.start, loginOptions || {}, {\n          queryParams: { tenant: tenantIdOrEmail, redirectURL: redirectUrl },\n          token,\n        })\n      )\n  ),\n  exchange: withExchangeValidations(\n    (code: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.saml.exchange, { code }))\n  ),\n});\n\nexport default withSaml;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  User,\n  SdkResponse,\n  JWTResponse,\n  TOTPResponse,\n  LoginOptions,\n} from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst loginIdValidations = stringNonEmpty('loginId');\nconst withVerifyValidations = withValidations(\n  loginIdValidations,\n  stringNonEmpty('code')\n);\nconst withSignUpValidations = withValidations(loginIdValidations);\nconst withUpdateValidations = withValidations(loginIdValidations);\n\nconst withTotp = (httpClient: HttpClient) => ({\n  signUp: withSignUpValidations(\n    (loginId: string, user?: User): Promise<SdkResponse<TOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.totp.signUp, { loginId, user })\n      )\n  ),\n\n  verify: withVerifyValidations(\n    (\n      loginId: string,\n      code: string,\n      loginOptions?: LoginOptions,\n      token?: string\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.totp.verify,\n          { loginId, code, loginOptions },\n          { token }\n        )\n      )\n  ),\n\n  update: withUpdateValidations(\n    (loginId: string, token?: string): Promise<SdkResponse<TOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.totp.update, { loginId }, { token })\n      )\n  ),\n});\n\nexport default withTotp;\n","import { stringNonEmpty, withValidations } from '../validations';\n\nconst loginIdValidation = stringNonEmpty('loginId');\nconst newPasswordValidation = stringNonEmpty('newPassword');\nexport const withSignValidations = withValidations(\n  loginIdValidation,\n  stringNonEmpty('password')\n);\nexport const withSendResetValidations = withValidations(loginIdValidation);\nexport const withUpdateValidation = withValidations(\n  loginIdValidation,\n  newPasswordValidation\n);\nexport const withReplaceValidation = withValidations(\n  loginIdValidation,\n  stringNonEmpty('oldPassword'),\n  newPasswordValidation\n);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport {\n  JWTResponse,\n  LoginOptions,\n  PasswordPolicyResponse,\n  PasswordResetResponse,\n  SdkResponse,\n  SignUpOptions,\n  TemplateOptions,\n  User,\n} from '../types';\nimport {\n  withReplaceValidation,\n  withSendResetValidations,\n  withSignValidations,\n  withUpdateValidation,\n} from './validations';\n\nconst withPassword = (httpClient: HttpClient) => ({\n  signUp: withSignValidations(\n    (\n      loginId: string,\n      password: string,\n      user?: User,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.signUp, {\n          loginId,\n          password,\n          user,\n          loginOptions: signUpOptions,\n        }),\n      ),\n  ),\n\n  signIn: withSignValidations(\n    (\n      loginId: string,\n      password: string,\n      loginOptions?: LoginOptions,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.signIn, {\n          loginId,\n          password,\n          loginOptions,\n        }),\n      ),\n  ),\n\n  sendReset: withSendResetValidations(\n    (\n      loginId: string,\n      redirectUrl?: string,\n      templateOptions?: TemplateOptions,\n    ): Promise<SdkResponse<PasswordResetResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.sendReset, {\n          loginId,\n          redirectUrl,\n          templateOptions,\n        }),\n      ),\n  ),\n\n  update: withUpdateValidation(\n    (\n      loginId: string,\n      newPassword: string,\n      token?: string,\n    ): Promise<SdkResponse<never>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.password.update,\n          {\n            loginId,\n            newPassword,\n          },\n          { token },\n        ),\n      ),\n  ),\n\n  replace: withReplaceValidation(\n    (\n      loginId: string,\n      oldPassword: string,\n      newPassword: string,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.replace, {\n          loginId,\n          oldPassword,\n          newPassword,\n        }),\n      ),\n  ),\n\n  policy: (): Promise<SdkResponse<PasswordPolicyResponse>> =>\n    transformResponse(httpClient.get(apiPaths.password.policy)),\n});\n\nexport default withPassword;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  SdkResponse,\n  ResponseData,\n  LoginOptions,\n  JWTResponse,\n  WebAuthnStartResponse,\n} from './types';\nimport { string, stringNonEmpty, withValidations } from './validations';\n\nconst loginIdStringValidations = string('loginId');\nconst loginIdNonEmptyValidations = stringNonEmpty('loginId');\nconst originValidations = stringNonEmpty('origin');\n\nconst withSignUpStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n  stringNonEmpty('name')\n);\nconst withSignUpOrInStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations\n);\nconst withSignInStartValidations = withValidations(\n  loginIdStringValidations,\n  originValidations\n);\nconst withUpdateStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n  stringNonEmpty('token')\n);\nconst withFinishValidations = withValidations(\n  stringNonEmpty('transactionId'),\n  stringNonEmpty('response')\n);\n\nconst withWebauthn = (httpClient: HttpClient) => ({\n  signUp: {\n    start: withSignUpStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        name: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUp.start, {\n            user: {\n              loginId,\n              name,\n            },\n            origin,\n          })\n        )\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string\n      ): Promise<SdkResponse<JWTResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUp.finish, {\n            transactionId,\n            response,\n          })\n        )\n    ),\n  },\n\n  signIn: {\n    start: withSignInStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        loginOptions?: LoginOptions,\n        token?: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.webauthn.signIn.start,\n            { loginId, origin, loginOptions },\n            { token }\n          )\n        )\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string\n      ): Promise<SdkResponse<JWTResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signIn.finish, {\n            transactionId,\n            response,\n          })\n        )\n    ),\n  },\n\n  signUpOrIn: {\n    start: withSignUpOrInStartValidations(\n      (\n        loginId: string,\n        origin: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUpOrIn.start, {\n            loginId,\n            origin,\n          })\n        )\n    ),\n  },\n\n  update: {\n    start: withUpdateStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        token: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.webauthn.update.start,\n            { loginId, origin },\n            { token }\n          )\n        )\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string\n      ): Promise<SdkResponse<ResponseData>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.update.finish, {\n            transactionId,\n            response,\n          })\n        )\n    ),\n  },\n});\n\nexport default withWebauthn;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { normalizeWaitForSessionConfig } from '../../utils';\nimport { transformResponse } from '../helpers';\nimport {\n  JWTResponse,\n  LoginOptions,\n  SdkResponse,\n  SignUpOptions,\n  User,\n  WaitForSessionConfig,\n} from '../types';\nimport { stringNonEmpty, string, withValidations } from '../validations';\nimport { NOTPResponse } from './types';\n\nconst loginIdValidations = string('loginId');\n\nconst withSignValidations = withValidations(loginIdValidations);\n\nconst withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef'),\n);\n\nconst withNotp = (httpClient: HttpClient) => ({\n  signUpOrIn: withSignValidations(\n    (\n      loginId?: string,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<NOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.notp.signUpOrIn, {\n          loginId,\n          loginOptions: signUpOptions,\n        }),\n      ),\n  ),\n  signUp: withSignValidations(\n    (\n      loginId?: string,\n      user?: User,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<NOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.notp.signUp, {\n          loginId,\n          user,\n          loginOptions: signUpOptions,\n        }),\n      ),\n  ),\n  signIn: withSignValidations(\n    (\n      loginId?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n    ): Promise<SdkResponse<NOTPResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.notp.signIn,\n          { loginId, loginOptions },\n          { token },\n        ),\n      ),\n  ),\n  waitForSession: withWaitForSessionValidations(\n    (\n      pendingRef: string,\n      config?: WaitForSessionConfig,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      new Promise((resolve) => {\n        const { pollingIntervalMs, timeoutMs } =\n          normalizeWaitForSessionConfig(config);\n        let timeout: NodeJS.Timeout | undefined;\n        const interval = setInterval(async () => {\n          const resp = await httpClient.post(apiPaths.notp.session, {\n            pendingRef,\n          });\n          if (resp.ok) {\n            clearInterval(interval);\n            if (timeout) clearTimeout(timeout);\n            resolve(transformResponse(Promise.resolve(resp)));\n          }\n        }, pollingIntervalMs);\n\n        timeout = setTimeout(() => {\n          resolve({\n            error: {\n              errorDescription: `Session polling timeout exceeded: ${timeoutMs}ms`,\n              errorCode: '0',\n            },\n            ok: false,\n          });\n          clearInterval(interval);\n        }, timeoutMs);\n      }),\n  ),\n});\n\nexport default withNotp;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport withAccessKeys from './accesskey';\nimport withEnchantedLink from './enchantedLink';\nimport withFlow from './flow';\nimport {\n  getTenants,\n  getJwtPermissions,\n  getJwtRoles,\n  isJwtExpired,\n  transformResponse,\n} from './helpers';\nimport withMagicLink from './magicLink';\nimport withOauth from './oauth';\nimport withOtp from './otp';\nimport withSaml from './saml';\nimport withTotp from './totp';\nimport withPassword from './password';\nimport { JWTResponse, UserHistoryResponse, UserResponse } from './types';\nimport {\n  stringNonEmpty,\n  withValidations,\n  isStringOrUndefinedValidator,\n} from './validations';\nimport withWebauthn from './webauthn';\nimport { isString, isStringOrUndefined } from './validations/validators';\nimport withNotp from './notp';\n\nconst withJwtValidations = withValidations(stringNonEmpty('token'));\nconst withOptionalTokenValidations = withValidations(\n  isStringOrUndefinedValidator('token'),\n);\n\n/** Returns Descope SDK with all available operations */\nexport default (httpClient: HttpClient) => ({\n  accessKey: withAccessKeys(httpClient),\n  otp: withOtp(httpClient),\n  magicLink: withMagicLink(httpClient),\n  enchantedLink: withEnchantedLink(httpClient),\n  oauth: withOauth(httpClient),\n  saml: withSaml(httpClient),\n  totp: withTotp(httpClient),\n  notp: withNotp(httpClient),\n  webauthn: withWebauthn(httpClient),\n  password: withPassword(httpClient),\n  flow: withFlow(httpClient),\n  /**\n   * Refreshes a session token\n   * Should be called when a session has expired (failed validation) to renew it\n   * @param token A valid refresh token\n   * @returns The updated authentication info (JWTs)\n   */\n  refresh: withOptionalTokenValidations((token?: string) =>\n    transformResponse<JWTResponse>(\n      httpClient.post(apiPaths.refresh, {}, { token }),\n    ),\n  ),\n  /**\n   * Selects a tenant for the current session\n   * @param tenantId The tenant to select\n   * @param token A valid refresh token\n   * @returns The updated authentication info (JWTs). The session token will be updated with the selected tenant under the \"dct\" claim\n   */\n  selectTenant: withValidations(\n    [isString('tenantId')],\n    [isStringOrUndefined('\"token\" must be string or undefined')],\n  )((tenantId: string, token?: string) =>\n    transformResponse<JWTResponse>(\n      httpClient.post(apiPaths.selectTenant, { tenant: tenantId }, { token }),\n    ),\n  ),\n  /**\n   * Logs out the current session\n   * @param token A valid refresh token\n   */\n  logout: withOptionalTokenValidations((token?: string) =>\n    transformResponse<never>(httpClient.post(apiPaths.logout, {}, { token })),\n  ),\n  /**\n   * Logs out all sessions for the current user\n   * @param token A valid refresh token\n   */\n  logoutAll: withOptionalTokenValidations((token?: string) =>\n    transformResponse<never>(\n      httpClient.post(apiPaths.logoutAll, {}, { token }),\n    ),\n  ),\n  /**\n   * Returns the current user details\n   * @param token A valid refresh token\n   * @returns The current user details\n   */\n  me: withOptionalTokenValidations((token?: string) =>\n    transformResponse<UserResponse>(httpClient.get(apiPaths.me, { token })),\n  ),\n  /**\n   * Returns the current user authentication history\n   * @param token A valid refresh token\n   * @returns The current user authentication history\n   */\n  history: withOptionalTokenValidations((token?: string) =>\n    transformResponse<UserHistoryResponse>(\n      httpClient.get(apiPaths.history, { token }),\n    ),\n  ),\n  /**\n   * Checks if the given JWT is still valid but DOES NOT check for signature\n   * @param token A valid token\n   * @returns true if the JWT is expired, false otherwise\n   */\n  isJwtExpired: withJwtValidations(isJwtExpired),\n  /**\n   * Returns the list of tenants in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @returns The list of tenants in the given JWT\n   */\n  getTenants: withJwtValidations(getTenants),\n  /**\n   * Returns the list of permissions granted in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @param tenant The tenant to check permissions for. If not provided, the permissions for the current tenant will be returned\n   * @returns The list of permissions granted in the given JWT\n   */\n  getJwtPermissions: withJwtValidations(getJwtPermissions),\n  /**\n   * Returns the list of roles specified in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @param tenant The tenant to check roles for. If not provided, the roles for the current tenant will be returned\n   * @returns The list of roles specified in the given JWT\n   */\n  getJwtRoles: withJwtValidations(getJwtRoles),\n  httpClient,\n});\n","import { DEFAULT_BASE_API_URL } from './constants';\nimport createHttpClient from './httpClient';\nimport { AfterRequest, BeforeRequest, Fetch, Hooks } from './httpClient/types';\nimport createSdk from './sdk';\nimport { Logger } from './sdk/types';\nimport { stringNonEmpty, withValidations } from './sdk/validations';\nimport { hasPathValue } from './sdk/validations/validators';\n\ntype SdkConfig = {\n  projectId: string;\n  logger?: Logger;\n  baseUrl?: string;\n  hooks?: Hooks;\n  cookiePolicy?: RequestCredentials | null;\n  baseHeaders?: HeadersInit;\n  fetch?: Fetch;\n};\n\n/** Validate we have non-empty project id */\nconst withSdkConfigValidations = withValidations([\n  hasPathValue('projectId', stringNonEmpty('projectId')),\n]);\n\n/** Add the ability to pass multiple hooks instead of one when creating an SDK instance */\nconst withMultipleHooks =\n  <T extends object>(createSdk: (config: SdkConfig) => T) =>\n  (\n    config: Omit<SdkConfig, 'hooks'> & {\n      hooks?: {\n        beforeRequest?: BeforeRequest | BeforeRequest[];\n        afterRequest?: AfterRequest | AfterRequest[];\n        transformResponse?: Hooks['transformResponse'];\n      };\n    },\n  ) => {\n    const beforeRequest: BeforeRequest = (conf) => {\n      // get the before hooks from the config while function is running\n      // because the hooks might change after sdk creation\n      const beforeRequestHooks = [].concat(config.hooks?.beforeRequest || []);\n      return beforeRequestHooks?.reduce((acc, fn) => fn(acc), conf);\n    };\n\n    const afterRequest: AfterRequest = async (req, res) => {\n      // get the after hooks from the config while function is running\n      // because the hooks might change after sdk creation\n      const afterRequestHooks = [].concat(config.hooks?.afterRequest || []);\n      const results = await Promise.allSettled(\n        afterRequestHooks?.map((fn) => fn(req, res?.clone())),\n      );\n      // eslint-disable-next-line no-console\n      results.forEach(\n        (result) =>\n          result.status === 'rejected' && config.logger?.error(result.reason),\n      );\n    };\n\n    return createSdk({\n      ...config,\n      hooks: {\n        beforeRequest,\n        afterRequest,\n        transformResponse: config.hooks?.transformResponse,\n      },\n    });\n  };\n\n/** Descope SDK client */\nexport default withSdkConfigValidations(\n  withMultipleHooks(\n    ({\n      projectId,\n      logger,\n      baseUrl,\n      hooks,\n      cookiePolicy,\n      baseHeaders = {},\n      fetch,\n    }: SdkConfig) =>\n      createSdk(\n        createHttpClient({\n          baseUrl: baseUrl || DEFAULT_BASE_API_URL,\n          projectId,\n          logger,\n          hooks,\n          cookiePolicy,\n          baseConfig: { baseHeaders },\n          fetch,\n        }),\n      ),\n  ),\n);\n","import createSdk from './createSdk';\nimport {\n  HTTPMethods,\n  RequestConfig,\n  ExtendedResponse,\n} from './httpClient/types';\nimport { OAuthProviders } from './sdk/oauth/types';\nimport { DeliveryMethods } from './sdk/types';\n\n/** Descope SDK client with delivery methods enum.\n *\n * Please see full documentation at {@link https://docs.descope.com/guides Descope Docs}\n * @example Usage\n *\n * ```js\n * import descopeSdk from '@descope/core-js-sdk';\n *\n * const myProjectId = 'xxx';\n * const sdk = descopeSdk({ projectId: myProjectId });\n *\n * const userLoginId = 'loginId';\n * sdk.otp.signIn.email(userLoginId);\n * const jwtResponse = sdk.otp.verify.email(userIdentifier, codeFromEmail);\n * ```\n */\nexport default Object.assign(createSdk, { DeliveryMethods });\n\nexport { transformResponse } from './sdk/helpers';\nexport type {\n  EnchantedLinkResponse,\n  ExchangeAccessKeyResponse,\n  FlowAction,\n  FlowResponse,\n  FlowStatus,\n  JWTResponse,\n  ResponseData,\n  SdkResponse,\n  TOTPResponse,\n  URLResponse,\n  UserResponse,\n  UserHistoryResponse,\n  LoginOptions,\n  AccessKeyLoginOptions,\n} from './sdk/types';\nexport * from './utils';\nexport { default as HttpStatusCodes } from './constants/httpStatusCodes';\nexport type { SdkFnWrapper } from './utils';\nexport type { HTTPMethods, RequestConfig, ExtendedResponse };\n\n/** Type to restrict to valid delivery methods */\nexport type DeliveryMethod = keyof typeof DeliveryMethods;\n/** Type to restrict to valid OAuth providers */\nexport type OAuthProvider = keyof typeof OAuthProviders;\n"],"names":["apiPaths","exchange","verify","signIn","signUp","update","email","phone","signUpOrIn","session","start","startNative","finishNative","finish","sendReset","replace","policy","next","BASE_URL_REGION_PLACEHOLDER","DEFAULT_BASE_API_URL","MIN_POLLING_INTERVAL_MS","MAX_POLLING_TIMEOUT_MS","DESCOPE_CURRENT_TENANT_CLAIM","httpLogBuilder","msg","headers","headersObj","entries","Object","fromEntries","Headers","JSON","stringify","this","body","Body","url","Url","toString","method","Method","title","Title","status","Status","build","keys","flatMap","key","join","createFetchLogger","logger","receivedFetch","fetchInternal","fetch","async","args","resp","respText","text","Promise","resolve","json","parse","clone","fetchWrapper","warn","Error","log","buildRequestLog","ok","respBody","statusText","buildResponseLog","HTTPMethods","urlBuilder","path","baseUrl","queryParams","projectId","region","slice","forEach","index","length","mergeHeaders","sources","reduce","acc","source","srcArr","Array","isArray","from","getSrcArr","_","value","serializeBody","undefined","createAuthorizationHeader","token","bearer","Authorization","createHttpClient","baseConfig","hooks","cookiePolicy","fetchWithLogger","sendRequest","config","requestConfig","beforeRequest","requestInit","baseHeaders","credentials","res","afterRequest","transformResponse","cookies","_a","get","split","cookie","assign","trim","mutableResponse","post","put","delete","buildUrl","HttpStatusCodes","TOO_MANY_REQUESTS","getJwtAuthorizationItems","tenant","claim","claims","parseJwt","tenants","items","jwtDecode","isJwtExpired","exp","Date","getTime","getTenants","getJwtPermissions","getJwtRoles","pathJoin","response","transform","ret","code","data","error","retryAfter","Number","parseInt","createValidator","rule","defaultMsg","val","createValidation","validators","validate","validator","errMsg","regexMatch","regex","test","validateEmail","validatePhone","validatePathValue","rules","object","pathName","defaultValue","parts","String","m","i","v","isEmail","isPhone","isNotEmpty","min","isString","isUndefined","isStringOrUndefined","errors","filter","withValidations","argsRules","fn","rulesArr","string","fieldName","stringNonEmpty","stringEmail","stringPhone","withExchangeValidations","withAccessKeys","httpClient","accessKey","loginOptions","wrapWith","obj","paths","wrapper","sections","section","shift","currentRef","origFn","normalizeWaitForSessionConfig","pollingIntervalMs","timeoutMs","Math","max","DeliveryPhone","DeliveryEmail","DeliveryMethods","FlowStatus","loginIdValidations","withVerifyValidations","withSignValidations","withWaitForSessionValidations","withUpdateEmailValidations","withEnchantedLink","loginId","URI","signUpOptions","user","waitForSession","pendingRef","timeout","interval","setInterval","clearInterval","clearTimeout","setTimeout","errorDescription","errorCode","updateOptions","withStartValidations","withNextValidations","withFlow","flowId","options","conditionInteractionId","interactionId","version","componentsVersion","input","executionId","stepId","withUpdatePhoneValidations","deliveryMethods","d","voice","withMagicLink","delivery","OAuthProviders","withOauth","provider","redirectUrl","redirectURL","implicit","stateId","idToken","withOtp","withSaml","tenantIdOrEmail","withSignUpValidations","withUpdateValidations","withTotp","loginIdValidation","newPasswordValidation","withSendResetValidations","withUpdateValidation","withReplaceValidation","withPassword","password","templateOptions","newPassword","oldPassword","loginIdStringValidations","loginIdNonEmptyValidations","originValidations","withSignUpStartValidations","withSignUpOrInStartValidations","withSignInStartValidations","withUpdateStartValidations","withFinishValidations","withWebauthn","origin","name","transactionId","withNotp","withJwtValidations","withOptionalTokenValidations","createSdk","withSdkConfigValidations","conf","beforeRequestHooks","concat","req","afterRequestHooks","allSettled","map","result","reason","withMultipleHooks","otp","magicLink","enchantedLink","oauth","saml","totp","notp","webauthn","flow","refresh","selectTenant","tenantId","logout","logoutAll","me","history"],"mappings":"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"}