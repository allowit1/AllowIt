/// <reference types="core-js-sdk" />
import * as _descope_core_js_sdk from '@descope/core-js-sdk';
export { UserResponse } from '@descope/core-js-sdk';

/**
 * Configuration for OneTap.
 */
interface OneTapConfig {
    /** Whether to auto select. Optional. */
    auto_select?: boolean;
    /** Whether to cancel on tap outside. Optional. */
    cancel_on_tap_outside?: boolean;
    /** ID of the prompt parent. Optional. */
    prompt_parent_id?: string;
    /** Context. Optional. */
    context?: 'signin' | 'signup' | 'use';
    /** Callback function to handle the intermediate iframe close event. Optional. */
    intermediate_iframe_close_callback?: () => void;
    /** Whether to support ITP. Optional. */
    itp_support?: boolean;
    /** Login hint. Optional. */
    login_hint?: string;
    /** HD. Optional. */
    hd?: string;
    /** Whether to use FedCM for prompt. Optional. */
    use_fedcm_for_prompt?: boolean;
}

declare function isSupported(requirePlatformAuthenticator?: boolean): Promise<boolean>;

type PersistTokensOptions<A extends boolean> = {
    persistTokens?: A;
    storagePrefix?: string;
    preview?: boolean;
    sessionTokenViaCookie?: A extends true ? boolean : never;
};

type AutoRefreshOptions = {
    autoRefresh?: boolean;
};

type FingerprintOptions = {
    fpKey?: string;
    fpLoad?: boolean;
};

/** Default name for the session cookie name / local storage key */
declare const SESSION_TOKEN_KEY = "DS";
/** Default name for the refresh local storage key */
declare const REFRESH_TOKEN_KEY = "DSR";

/**
 * Ensure fingerprint ids (request id, session id) exist.
 * If not, It will generate and load them into to browser storage.
 * NOTE: Using fingerprintJS data has cost, use considerably.
 * @param fpKey FingerprintJS API key
 */
declare const ensureFingerprintIds: (fpKey: string, baseUrl?: string) => Promise<void>;
/** Clear Fingerprint data from storage */
declare const clearFingerprintData: () => void;

declare const decoratedCreateSdk: <A extends boolean>({ persistTokens: isPersistTokens, sessionTokenViaCookie, storagePrefix, ...config }: Omit<{
    projectId: string;
    logger?: {
        debug: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        log: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        error: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        warn: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
    };
    baseUrl?: string;
    hooks?: {
        beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
        afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
        transformResponse?: (mutableResponse: _descope_core_js_sdk.ExtendedResponse) => Promise<_descope_core_js_sdk.ExtendedResponse>;
    };
    cookiePolicy?: RequestCredentials;
    baseHeaders?: HeadersInit;
    fetch?: typeof fetch;
}, "hooks"> & {
    hooks?: {
        beforeRequest?: ((config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig) | ((config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig)[];
        afterRequest?: ((req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>) | ((req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>)[];
        transformResponse?: (mutableResponse: _descope_core_js_sdk.ExtendedResponse) => Promise<_descope_core_js_sdk.ExtendedResponse>;
    };
} & FingerprintOptions & AutoRefreshOptions & {
    storeLastAuthenticatedUser?: boolean;
} & PersistTokensOptions<A>) => A extends true ? ((({
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            start: (loginId: string, origin: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: typeof isSupported;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        oneTap(provider?: string, oneTapConfig?: OneTapConfig, loginOptions?: _descope_core_js_sdk.LoginOptions, onSkip?: () => void): Promise<unknown>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        isSupported(): boolean;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _descope_core_js_sdk.AccessKeyLoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T;
                onMergeUseExisting?: T extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2;
                onMergeUseExisting?: T_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: {
            email: <T_4 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4;
                onMergeUseExisting?: T_4 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        };
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _descope_core_js_sdk.LoginOptions, implicit?: boolean) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _descope_core_js_sdk.LoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        policy: () => Promise<_descope_core_js_sdk.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    selectTenant: (tenantId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    logout: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    logoutAll: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    me: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserResponse>>;
    history: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    httpClient: {
        get: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        post: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        put: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        delete: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        hooks?: {
            beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
            afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
            transformResponse?: (mutableResponse: _descope_core_js_sdk.ExtendedResponse) => Promise<_descope_core_js_sdk.ExtendedResponse>;
        };
        buildUrl: (path: string, queryParams?: {
            [key: string]: string;
        }) => string;
    };
} | {
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            start: (loginId: string, origin: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: typeof isSupported;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        oneTap(provider?: string, oneTapConfig?: OneTapConfig, loginOptions?: _descope_core_js_sdk.LoginOptions, onSkip?: () => void): Promise<unknown>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        isSupported(): boolean;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _descope_core_js_sdk.AccessKeyLoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T;
                onMergeUseExisting?: T extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2;
                onMergeUseExisting?: T_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: {
            email: <T_4 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4;
                onMergeUseExisting?: T_4 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        };
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _descope_core_js_sdk.LoginOptions, implicit?: boolean) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _descope_core_js_sdk.LoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        policy: () => Promise<_descope_core_js_sdk.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    selectTenant: (tenantId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    logout: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    logoutAll: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    me: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserResponse>>;
    history: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    httpClient: {
        get: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        post: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        put: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        delete: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        hooks?: {
            beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
            afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
            transformResponse?: (mutableResponse: _descope_core_js_sdk.ExtendedResponse) => Promise<_descope_core_js_sdk.ExtendedResponse>;
        };
        buildUrl: (path: string, queryParams?: {
            [key: string]: string;
        }) => string;
    };
}) & {
    onSessionTokenChange: (cb: (data: string) => void) => () => any[];
    onUserChange: (cb: (data: _descope_core_js_sdk.UserResponse) => void) => () => any[];
}) & {
    getLastUserLoginId: () => string;
    getLastUserDisplayName: () => string;
}) & {
    getRefreshToken: () => string;
    getSessionToken: () => string;
} : (({
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            start: (loginId: string, origin: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: typeof isSupported;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        oneTap(provider?: string, oneTapConfig?: OneTapConfig, loginOptions?: _descope_core_js_sdk.LoginOptions, onSkip?: () => void): Promise<unknown>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        isSupported(): boolean;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _descope_core_js_sdk.AccessKeyLoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T;
                onMergeUseExisting?: T extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2;
                onMergeUseExisting?: T_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: {
            email: <T_4 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4;
                onMergeUseExisting?: T_4 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        };
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _descope_core_js_sdk.LoginOptions, implicit?: boolean) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _descope_core_js_sdk.LoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        policy: () => Promise<_descope_core_js_sdk.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    selectTenant: (tenantId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    logout: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    logoutAll: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    me: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserResponse>>;
    history: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    httpClient: {
        get: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        post: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        put: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        delete: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        hooks?: {
            beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
            afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
            transformResponse?: (mutableResponse: _descope_core_js_sdk.ExtendedResponse) => Promise<_descope_core_js_sdk.ExtendedResponse>;
        };
        buildUrl: (path: string, queryParams?: {
            [key: string]: string;
        }) => string;
    };
} | {
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any)[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>) & {
            start: (loginId: string, origin: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            start: (loginId: string, origin: string, token: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: typeof isSupported;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        oneTap(provider?: string, oneTapConfig?: OneTapConfig, loginOptions?: _descope_core_js_sdk.LoginOptions, onSkip?: () => void): Promise<unknown>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        isSupported(): boolean;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _descope_core_js_sdk.AccessKeyLoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T;
                onMergeUseExisting?: T extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2;
                onMergeUseExisting?: T_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                }) => Promise<_descope_core_js_sdk.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: {
            email: <T_4 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4;
                onMergeUseExisting?: T_4 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        };
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _descope_core_js_sdk.LoginOptions, implicit?: boolean) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.ResponseData>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.URLResponse>>;
        exchange: (code: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _descope_core_js_sdk.LoginOptions, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _descope_core_js_sdk.LoginOptions) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_descope_core_js_sdk.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
        policy: () => Promise<_descope_core_js_sdk.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    refresh: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    selectTenant: (tenantId: string, token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.JWTResponse>>;
    logout: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    logoutAll: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<never>>;
    me: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserResponse>>;
    history: (token?: string) => Promise<_descope_core_js_sdk.SdkResponse<_descope_core_js_sdk.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    httpClient: {
        get: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        post: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        put: (path: string, body?: any, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        delete: (path: string, config?: {
            headers?: HeadersInit;
            queryParams?: {
                [key: string]: string;
            };
            token?: string;
        }) => Promise<Response>;
        hooks?: {
            beforeRequest?: (config: _descope_core_js_sdk.RequestConfig) => _descope_core_js_sdk.RequestConfig;
            afterRequest?: (req: _descope_core_js_sdk.RequestConfig, res: Response) => void | Promise<void>;
            transformResponse?: (mutableResponse: _descope_core_js_sdk.ExtendedResponse) => Promise<_descope_core_js_sdk.ExtendedResponse>;
        };
        buildUrl: (path: string, queryParams?: {
            [key: string]: string;
        }) => string;
    };
}) & {
    onSessionTokenChange: (cb: (data: string) => void) => () => any[];
    onUserChange: (cb: (data: _descope_core_js_sdk.UserResponse) => void) => () => any[];
}) & {
    getLastUserLoginId: () => string;
    getLastUserDisplayName: () => string;
};

export { type OneTapConfig, REFRESH_TOKEN_KEY, SESSION_TOKEN_KEY, clearFingerprintData, decoratedCreateSdk as default, ensureFingerprintIds };
